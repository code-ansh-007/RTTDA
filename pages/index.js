import Head from "next/head";
import { useEffect, useState } from "react";
import Todo from "../components/Todo";
import { db } from "../firebase";
import {
  collection,
  addDoc,
  serverTimestamp,
  onSnapshot,
  query,
  where,
  orderBy,
} from "firebase/firestore";
import { useAuth } from "../context/AuthContext";
import { useRouter } from "next/router";
import { AiOutlineLoading3Quarters } from "react-icons/ai";
import { VscLoading } from "react-icons/vsc";

export default function Home() {
  const [todo, setTodo] = useState("");
  const [todos, setTodos] = useState([]);
  const { currentUser } = useAuth();
  const [loading, setLoading] = useState(false);
  const router = useRouter();
  const [todoLoading, setTodoLoading] = useState(false);

  async function handleToDoAdd() {
    setLoading(true);
    if (!todo) {
      return;
    }
    try {
      await addDoc(collection(db, "todos"), {
        task: todo,
        uid: currentUser.uid,
        timestamp: serverTimestamp(),
      });
      setLoading(false);
    } catch (error) {
      console.log("error in adding doc: ", error);
    }
    setTodo("");
  }

  {
    currentUser &&
      useEffect(() => {
        setTodoLoading(true);
        const unsubscribe = onSnapshot(
          query(
            collection(db, "todos"),
            where("uid", "==", currentUser?.uid),
            orderBy("timestamp", "desc")
          ),
          (snapshot) => {
            setTodos(snapshot.docs);
            setTodoLoading(false);
          }
        );
        return unsubscribe; // ? clean up function
      }, [db]);
  }

  // ! chat GPT code ---> helped a lot really(firebase indexing was causing issues)
  // useEffect(() => {
  //   const unsubscribe = onSnapshot(collection(db, "todos"), (snapshot) => {
  //     console.log(snapshot.docs);
  //     setTodos(
  //       snapshot.docs
  //         .filter((doc) => doc.data().uid === currentUser.uid)
  //         .sort((a, b) => b.data().timestamp - a.data().timestamp)
  //     );
  //   });
  //   return unsubscribe; // ? clean up function
  // }, [db, currentUser.uid]);

  return (
    <>
      <Head>
        <title>RTTDA</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col items-center justify-center mt-5 px-3">
        {/* BELOW IS ADD TODO DIV */}
        <div className="flex items-center mb-7">
          <input
            type="text"
            value={todo}
            placeholder="Enter To Do..."
            className="text-sm px-2 py-1 w-[32ch] outline-none bg-inherit border-2 border-orange-400 rounded-md rounded-r-none"
            onChange={(e) => setTodo(e.target.value)}
          />
          <button
            onClick={() => {
              if (currentUser) {
                handleToDoAdd();
              } else {
                router.push("/login");
              }
            }}
            disabled={loading}
            className="border-2 border-l-0 text-orange-200 active:bg-orange-500 active:text-gray-200 duration-200 border-orange-400 py-[2px] px-2 rounded-r-md"
          >
            Add
          </button>
        </div>
        {/* <div>
          <i class="fa-solid fa-spinner"></i>
        </div> */}

        {/* TODOS DIV */}
        {todoLoading ? (
          <div>
            <i className="fa-solid mt-[140px] text-7xl animate-spin text-blue-500 fa-spinner "></i>
          </div>
        ) : (
          // <AiOutlineLoading3Quarters className="text-7xl text-blue-500 animate-spin mt-[140px]" />
          todos.map((item) => {
            return <Todo key={item.id} todo={item.data().task} id={item.id} />;
          })
        )}
      </main>
    </>
  );
}
